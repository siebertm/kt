{"version":3,"sources":["CountdownClock.tsx","TargetTimeForm.tsx","useInterval.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["CountdownClock","_ref","targetTime","now","remainingTime","moment","duration","diff","remainingParts","hours","minutes","seconds","react_default","a","createElement","className","map","n","concat","padStart","join","TargetTimeForm","onChange","type","value","format","e","target","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","App","initialTargetTime","window","localStorage","getItem","_useState","useState","_useState2","Object","slicedToArray","setTargetTime","_useState3","_useState4","setNow","setItem","toISOString","src_CountdownClock","src_TargetTimeForm","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0206b678.chunk.js","sourcesContent":["import React from 'react'\nimport moment, { Moment } from 'moment'\n\ninterface CountdownClockProps {\n  targetTime: Moment\n  now: Moment\n}\n\nconst CountdownClock: React.FC<CountdownClockProps> = ({ targetTime, now }) => {\n  const remainingTime = moment.duration(targetTime.diff(now))\n\n  const remainingParts = [remainingTime.hours(), remainingTime.minutes(), remainingTime.seconds()]\n\n  const sep = ':'\n\n  return (\n    <div className=\"CountdownClock\">\n      88:88:88\n      <div className=\"front\">{remainingParts.map(n => `${n}`.padStart(2, '0')).join(sep)}</div>\n    </div>\n  )\n}\n\nexport default CountdownClock\n","import React from 'react'\nimport moment, { Moment } from 'moment'\n\ninterface TargetTimeFormProps {\n  targetTime: Moment\n  onChange: React.Dispatch<Moment>\n}\n\nconst TargetTimeForm: React.FC<TargetTimeFormProps> = ({ targetTime, onChange }) => {\n  return (\n    <div className=\"TargetTimeForm\">\n      <input\n        type=\"datetime-local\"\n        value={targetTime.format('YYYY-MM-DDTHH:mm')}\n        onChange={e => onChange(moment(e.target.value))}\n      />\n    </div>\n  )\n}\n\nexport default TargetTimeForm\n","import { useEffect, useRef } from 'react'\n\nfunction useInterval(callback: Function, delay: number) {\n  const savedCallback = useRef<Function>()\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current && savedCallback.current()\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay)\n      return () => clearInterval(id)\n    }\n  }, [delay])\n}\n\nexport default useInterval\n","import React, { useState, useEffect } from 'react'\nimport moment from 'moment'\n\nimport CountdownClock from './CountdownClock'\nimport TargetTimeForm from './TargetTimeForm'\n\nimport 'dseg/css/dseg.css'\nimport './App.css'\n\nimport useInterval from './useInterval'\n\nconst DEFAULT_TARGET_TIME = '2019-05-11T00:00:00+02:00'\nconst STORAGE_KEY = 'targetTime'\n\nconst App: React.FC = () => {\n  const initialTargetTime = window.localStorage.getItem(STORAGE_KEY) || DEFAULT_TARGET_TIME\n  const [targetTime, setTargetTime] = useState(moment(initialTargetTime))\n  const [now, setNow] = useState(moment())\n\n  useEffect(() => {\n    window.localStorage.setItem(STORAGE_KEY, targetTime.toISOString())\n  })\n\n  useInterval(() => {\n    setNow(moment())\n  }, 1000)\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <CountdownClock now={now} targetTime={targetTime} />\n      </header>\n      <footer className=\"App-footer\">\n        <TargetTimeForm targetTime={targetTime} onChange={setTargetTime} />\n      </footer>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}